// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/grpc/v1/example.proto

package examplev1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/k-shir0/connect-go-example/pkg/gen/api/grpc/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ExampleServiceName is the fully-qualified name of the ExampleService service.
	ExampleServiceName = "example.v1.ExampleService"
)

// ExampleServiceClient is a client for the example.v1.ExampleService service.
type ExampleServiceClient interface {
	CreateTask(context.Context, *connect_go.Request[v1.CreateTaskRequest]) (*connect_go.Response[v1.CreateTaskResponse], error)
	ReadAllTask(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.ReadAllTaskResponse], error)
}

// NewExampleServiceClient constructs a client for the example.v1.ExampleService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewExampleServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ExampleServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &exampleServiceClient{
		createTask: connect_go.NewClient[v1.CreateTaskRequest, v1.CreateTaskResponse](
			httpClient,
			baseURL+"/example.v1.ExampleService/CreateTask",
			opts...,
		),
		readAllTask: connect_go.NewClient[emptypb.Empty, v1.ReadAllTaskResponse](
			httpClient,
			baseURL+"/example.v1.ExampleService/ReadAllTask",
			opts...,
		),
	}
}

// exampleServiceClient implements ExampleServiceClient.
type exampleServiceClient struct {
	createTask  *connect_go.Client[v1.CreateTaskRequest, v1.CreateTaskResponse]
	readAllTask *connect_go.Client[emptypb.Empty, v1.ReadAllTaskResponse]
}

// CreateTask calls example.v1.ExampleService.CreateTask.
func (c *exampleServiceClient) CreateTask(ctx context.Context, req *connect_go.Request[v1.CreateTaskRequest]) (*connect_go.Response[v1.CreateTaskResponse], error) {
	return c.createTask.CallUnary(ctx, req)
}

// ReadAllTask calls example.v1.ExampleService.ReadAllTask.
func (c *exampleServiceClient) ReadAllTask(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.ReadAllTaskResponse], error) {
	return c.readAllTask.CallUnary(ctx, req)
}

// ExampleServiceHandler is an implementation of the example.v1.ExampleService service.
type ExampleServiceHandler interface {
	CreateTask(context.Context, *connect_go.Request[v1.CreateTaskRequest]) (*connect_go.Response[v1.CreateTaskResponse], error)
	ReadAllTask(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.ReadAllTaskResponse], error)
}

// NewExampleServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewExampleServiceHandler(svc ExampleServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/example.v1.ExampleService/CreateTask", connect_go.NewUnaryHandler(
		"/example.v1.ExampleService/CreateTask",
		svc.CreateTask,
		opts...,
	))
	mux.Handle("/example.v1.ExampleService/ReadAllTask", connect_go.NewUnaryHandler(
		"/example.v1.ExampleService/ReadAllTask",
		svc.ReadAllTask,
		opts...,
	))
	return "/example.v1.ExampleService/", mux
}

// UnimplementedExampleServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedExampleServiceHandler struct{}

func (UnimplementedExampleServiceHandler) CreateTask(context.Context, *connect_go.Request[v1.CreateTaskRequest]) (*connect_go.Response[v1.CreateTaskResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("example.v1.ExampleService.CreateTask is not implemented"))
}

func (UnimplementedExampleServiceHandler) ReadAllTask(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.ReadAllTaskResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("example.v1.ExampleService.ReadAllTask is not implemented"))
}
